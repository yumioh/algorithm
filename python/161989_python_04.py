# 벽을 1미터 길이의 구역 n개로 나누고, 각 구역에 왼쪽부터 순서대로 1번부터 n번까지 번호를 붙였습니다. 
# 그리고 페인트를 다시 칠해야 할 구역들을 정했습니다.
# 벽에 페인트를 칠하는 롤러의 길이는 m미터이고, 롤러로 벽에 페인트를 한 번 칠하는 규칙은 다음과 같습니다.
# 롤러가 벽에서 벗어나면 안 됩니다.
# 구역의 일부분만 포함되도록 칠하면 안 됩니다.
# 즉, 롤러의 좌우측 끝을 구역의 경계선 혹은 벽의 좌우측 끝부분에 맞춘 후 롤러를 위아래로 움직이면서 벽을 칠합니다. 
# 현재 페인트를 칠하는 구역들을 완전히 칠한 후 벽에서 롤러를 떼며, 이를 벽을 한 번 칠했다고 정의합니다.
# 한 구역에 페인트를 여러 번 칠해도 되고 다시 칠해야 할 구역이 아닌 곳에 페인트를 칠해도 되지만 
# 다시 칠하기로 정한 구역은 적어도 한 번 페인트칠을 해야 합니다. 예산을 아끼기 위해 다시 칠할 구역을 정했듯 
# 마찬가지로 롤러로 페인트칠을 하는 횟수를 최소화하려고 합니다.
# 정수 n, m과 다시 페인트를 칠하기로 정한 구역들의 번호가 담긴 정수 배열 section이 매개변수로 주어질 때 
# 롤러로 페인트칠해야 하는 최소 횟수를 return 하는 solution 함수를 작성해 주세요. 

def solution(n, m, section):
    # 페인트칠 횟수를 저장할 변수, 초기값은 1로 설정 (첫 번째 구간은 무조건 페인트칠을 해야 함)
    count = 1
    # 페인트 기준 위치를 처음으로 초기화
    standard = section[0]
    for i in section:
        print("standard : ", standard)
        print("i : ",i)
        # 현재 구간을 페인트칠 기준 위치에서 롤러의 길이를 빼고 비교하여 롤러로 페인트칠 가능한지 확인
        if standard + (m - 1) < i:
            # 현재 구간이 롤러로 페인트칠할 수 없다면 페인트칠 기준 위치를 현재 구간으로 업데이트
            standard = i
            # 페인트칠 횟수를 증가시킴 (새로운 구간에 페인트칠을 시작함)
            count += 1 
    return count

arr = [2, 3, 6]
print(solution(8,4,arr))
